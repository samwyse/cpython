PEP: 9999
Title: Register Virtual Machine for Python
Author: Skip Montanaro <skip@python.org>
Status: Active
Type: Standards Track
Content-Type: text/x-rst
Created: 28-Mar-2020
Python-Version: 4.0
Post-History: dd-mmm-yyyy

.. contents:: :depth: 2

Abstract
========

This PEP proposes the addition of register-based instructions to the
existing Python virtual machine, with the intent that they eventually
replace the existing stack-based opcodes.  Though both sets of
instructions are active in this effort, they are almost completely
distinct.  Within a single function only one set of opcodes or the
other will be used at any one time. (A few instructions are used by
both.)  Considering that, the current stack-based opcodes are referred
to below as the Python Virtual Machine ("PyVM") and the new
register-based opcodes are referred to as the Register Virtual Machine
("RVM").

Though submitted as a standards track PEP, the approach taken in the
initial implementation requires PyVM to be active as RVM is developed.
For that reason, as of its initial writing this document serves as
much as a guide for the architecture changes and for work which must
be done as for a rationale for the new virtual machine.


Motivation
==========

Over the past two decades, Python's virtual machine has been improved
in many ways.  Among the most visible to the core Python developer
are:

- Peephole optimizations [#peephett]_

- Function call performance improvements [#pep-590]_

- Use of computed gotos and opcode prediction [#predpitr]_

- Introduction of new instructions (reference?)

- Wordcode [#wordcode]_

Despite all that effort, stack manipulation opcodes (``LOAD_FAST``,
``POP_TOP``, etc) still account for a substantial fraction of all
opcodes executed.  This has been consistently true over a long period
of time [#dynlemb]_, [#instpage]_ and remains true today.  Running
Pyperformance using a development version of Python 3.9 showed that
the top four opcodes executed (``LOAD_FAST``, ``LOAD_CONST``,
``STORE_FAST`` and ``LOAD_GLOBAL``) accounted for nearly half of all
executed instructions.  They are low-cost instructions (compared with
``CALL_FUNCTION`` for example), but still eat up time and space in the
virtual machine, making it less efficient than it might be.  (The
complete table of opcode frequencies is in `Appendix - Opcode
Frequencies`_.)

While swapping out the virtual machine in toto doesn't qualify as low
hanging fruit, even after all this time it seems like it might be a
profitable change.


Previous Work
=============

Between 1998 and 2001, the author began work on a system named
Rattlesnake based on Python 1.5.2.  It was never more than a barebones
proof-of-concept, but did implement over 50 register-oriented
instructions, a substantial fraction of the machine at that time.  Its
structure was based on an earlier peephole optimizer written by the
author [#peepmont]_ and implemented as a peephole optimization class
which could be chained together with other optimizations.  As such, it
worked from the existing PyVM instructions, not any higher-level
representation.  While it never saw the light of day, the code
followed the author of this document around as a subtle reminder of
the possibility it represented.  It lives on, providing much of the
initial starting framework for the current translator.

In 2012, Victor Stinner implemented a nearly complete system
[#regstin].  It failed for a number of reasons, but seems like it was
very close to a complete system.

Both systems worked from PyVM bytecode as the starting point, and both
were based on the old bytecode instruction format which used variable
length instructions.  In 2005, Jeremy Hylton merged a new AST-based
compiler to the master development branch [#asthylt]_.


Rationale
=========

The "correct" approach is to modify, replace or duplicate the existing
AST-based compiler to produce RVM instructions.  Alas, the author had
no experience with it and decided to fall back to translation of PyVM
to RVM.  That provides fewer optimization opportunities, but allows
all the translation to be done using an external Python program.  It
should provide enough data to decide if the general idea is workable.
Aside from allowing quicker experimentation, it also makes the
development more accessible to Python developers without much
experience with the CPython implementation.  If the approach proves
worthwhile, developers with more experience with the compiler can push
that part of the system forward.  Consider the current approach an
attempt at producing a "minimum viable product," to use a business
buzz phrase.

Obviously, some work in the C code base is required.  This is mostly
confined to two files:

- ``Python/ceval.c`` - Each new instruction must be implemented, but
  Python/ceval.c provides an excellent set of templates in the form of
  the current PyVM instructions.  For the most part, the semantics of
  an RVM instruction are the same as the corresponding PyVM
  instruction.  The main difference between pairs of related
  instructions is how they get their data.

- ``Objects/frameobject.c`` - Most of this work has been done already,
  but more could be done.  The primary work necessary reorganization
  of the ``f_localsplus`` array so local variables and the stack space
  were adjacent.  As Stinner noted though [#regstin]_, adding a copy
  of the code object's constants to the frame object is also a
  performance win.  This is suggested by the opcode frequencies
  table.  ``LOAD_CONST`` is the second most frequently executed
  instruction.



Backwards Compatibility
=======================

Since the instruction set is an internal implementation detail
(although a significant one), there should be no backward
compatibility issues.  Tools which manipulate bytecode will obviously
have to be modified.  The ``dis`` module will be modified as
necessary.


Reference Implementation
========================

An in-progress (not yet complete) implementation [#regmont]_ is
available as a fork of the current CPython GitHub repo.  As of this
writing (March 2020) it remains quite incomplete.


Current Status
--------------

As of March 29, 2020:

- Implemented instructions - BINARY_ADD_REG, RETURN_VALUE_REG,
  LOAD_CONST_REG, LOAD_FAST_REG, STORE_FAST_REG, LOAD_GLOBAL_REG,
  COMPARE_OP_REG

- Implemented translator parts

  - Identification of basic blocks

  - Mapping between the PyVM and RVM versions of the above
    instructions (much leftover from Rattlesnake, but not yet tested)

  - Elimination of LOAD_FAST_REG and STORE_FAST_REG by forward
    propagation of the former and backward propagation of the latter.

  - Generation of wordcode from the RVM blocks (still buggy though).

Rejected Ideas
==============

No ideas have truly been rejected at this point.  The author has
simply been following the path of least resistance.  That means
implementing bits in Python where possible and disturbing the rest of
the CPython implementation as little as possible.  Those are just
trade-offs necessary to move things forward.  They aren't cast in
stone.


Open Issues
===========

A large number of issues remain unresolved.

- Register allocation - A long lost observation by Tim Peters that the
  existing stack space could be used for registers is employed to
  avoid increasing space taken by the frame object.  The downside is
  that there are a limited number of registers available to the
  translator.  The current translator does no proper register
  allocation.  Stinner's implementation did [#regstin]_.

- Proper implementation - As noted above, the current implementation
  is a translator of existing wordcode, essentially a complex peephole
  optimizer.  At some point, the AST-based compiler will need to be
  retargeted.

- Instruction implementation - As of this writing (March 2020), only a
  few instructions have been implemented.  Since the PyVM instruction
  set has grown significantly over the past two decades, it makes
  sense that this be tackled by multiple people in parallel.

- Wordcode - To simplify the work, wordcode was retained.  This works,
  but relies heavily on the ``EXTENDED_ARG`` instruction to provide
  arguments to instructions which need more than one.  While
  ``EXTENDED_ARG`` is really only half an instruction, it would be
  worth considering if a 32-bit instruction size for RVM makes more
  sense.


References
==========

.. [#asthylt] Merge ast-branch to head, Hylton
   (https://github.com/python/cpython/commit/3e0055f8c65c407e74ce476b8e2b1fb889723514)

.. [#dynlemb] Reordering opcodes (PEP 203 Augmented Assignment), Lemburg
   (https://mail.python.org/pipermail/python-dev/2000-July/007609.html)

.. [#dynmont] Getting Rid of Data Movement Instructions, Montanaro
   (https://mail.python.org/pipermail/python-list/2001-August/070944.html)

.. [#instpage] Profiling CPython at Instagram, Page
   (https://instagram-engineering.com/profiling-cpython-at-instagram-89d4cbeeb898)

.. [#peephett] Improve code generation Hettinger, et al
   (https://github.com/python/cpython/commit/f6f575ae6fc4b58f8735b6aebaa422d48bedcef4)

.. [#peepmont] A Peephole Optimizer for Python, Montanaro
   (https://web.archive.org/web/20010414044328/https://www.foretec.com/python/workshops/1998-11/proceedings/papers/montanaro/montanaro.html)

.. [#regmont] Register fork of CPython, Montanaro
   (https://github.com/smontanaro/cpython/tree/register)

.. [#regstin] My registervm fork (2012), Stinner
   (https://mail.python.org/archives/list/registervm@python.org/thread/X72OYMPH2HLTY4SIGVPKSTIRWL2XFY7G/)

.. [#pep-590] Vectorcall: a fast calling protocol for CPython
   (https://www.python.org/dev/peps/pep-0590/)

.. [#predpitr] Faster opcode dispatch on gcc, Pitrou
   (https://bugs.python.org/issue4753)

.. [#wordcode] ceval: use Wordcode, 16-bit bytecode, Remud
   (https://bugs.python.org/issue26647)


Appendix - Opcode Frequencies
=============================

Pyperformance 1.0.0 was run using Python 3.9.0a5+ compiled with
``-DDYNAMIC_EXECUTION_PROFILE=true``, capturing instruction counts for
each benchmark.  The results are displayed below:

.. table:: Opcode Frequencies
   :widths: 50 25 25
   :align: center

   +---------------------+--------------+--------------+
   |Instruction          |     Percent  |  Cumulative  |
   +---------------------+--------------+--------------+
   |LOAD_FAST            |      25.8%   |    25.75%    |
   +---------------------+--------------+--------------+
   |LOAD_CONST           |       9.9%   |    35.64%    |
   +---------------------+--------------+--------------+
   |STORE_FAST           |       7.7%   |    43.31%    |
   +---------------------+--------------+--------------+
   |LOAD_GLOBAL          |       5.5%   |    48.79%    |
   +---------------------+--------------+--------------+
   |CALL_FUNCTION        |       4.4%   |    53.16%    |
   +---------------------+--------------+--------------+
   |POP_JUMP_IF_FALSE    |       4.3%   |    57.47%    |
   +---------------------+--------------+--------------+
   |LOAD_ATTR            |       3.4%   |    60.91%    |
   +---------------------+--------------+--------------+
   |FOR_ITER             |       3.4%   |     64.34%   |
   +---------------------+--------------+--------------+
   |JUMP_ABSOLUTE        |        2.6%  |     66.97%   |
   +---------------------+--------------+--------------+
   |RETURN_VALUE         |        2.4%  |     69.37%   |
   +---------------------+--------------+--------------+
   |LOAD_METHOD          |        2.4%  |     71.76%   |
   +---------------------+--------------+--------------+
   |CALL_METHOD          |        2.4%  |     74.14%   |
   +---------------------+--------------+--------------+
   |EXTENDED_ARG         |        2.0%  |     76.16%   |
   +---------------------+--------------+--------------+
   |BINARY_SUBSCR        |        1.9%  |     78.02%   |
   +---------------------+--------------+--------------+
   |STORE_SUBSCR         |        1.8%  |     79.87%   |
   +---------------------+--------------+--------------+
   |POP_TOP              |        1.8%  |     81.64%   |
   +---------------------+--------------+--------------+
   |BINARY_ADD           |        1.5%  |     83.15%   |
   +---------------------+--------------+--------------+
   |IS_OP                |        1.3%  |     84.40%   |
   +---------------------+--------------+--------------+
   |LOAD_DEREF           |        1.1%  |     85.55%   |
   +---------------------+--------------+--------------+
   |COMPARE_OP           |        1.1%  |     86.68%   |
   +---------------------+--------------+--------------+
   |BINARY_MULTIPLY      |        1.0%  |     87.66%   |
   +---------------------+--------------+--------------+
   |STORE_ATTR           |        1.0%  |     88.62%   |
   +---------------------+--------------+--------------+
   |BINARY_MODULO        |        0.9%  |     89.51%   |
   +---------------------+--------------+--------------+
   |BINARY_TRUE_DIVIDE   |        0.9%  |     90.37%   |
   +---------------------+--------------+--------------+
   |POP_JUMP_IF_TRUE     |        0.8%  |     91.18%   |
   +---------------------+--------------+--------------+
   |UNPACK_SEQUENCE      |        0.8%  |     91.99%   |
   +---------------------+--------------+--------------+
   |CONTAINS_OP          |        0.7%  |     92.73%   |
   +---------------------+--------------+--------------+
   |JUMP_FORWARD         |        0.7%  |     93.43%   |
   +---------------------+--------------+--------------+
   |YIELD_FROM           |        0.6%  |     94.03%   |
   +---------------------+--------------+--------------+
   |SETUP_FINALLY        |        0.5%  |     94.57%   |
   +---------------------+--------------+--------------+
   |POP_BLOCK            |        0.5%  |     95.10%   |
   +---------------------+--------------+--------------+
   |BUILD_TUPLE          |        0.4%  |     95.51%   |
   +---------------------+--------------+--------------+
   |STORE_NAME           |        0.4%  |     95.92%   |
   +---------------------+--------------+--------------+
   |GET_ITER             |        0.3%  |     96.27%   |
   +---------------------+--------------+--------------+
   |MAKE_FUNCTION        |        0.3%  |     96.61%   |
   +---------------------+--------------+--------------+
   |BINARY_SUBTRACT      |        0.3%  |     96.92%   |
   +---------------------+--------------+--------------+
   |LOAD_NAME            |        0.3%  |     97.22%   |
   +---------------------+--------------+--------------+
   |DUP_TOP              |        0.3%  |     97.50%   |
   +---------------------+--------------+--------------+
   |LIST_APPEND          |        0.3%  |     97.75%   |
   +---------------------+--------------+--------------+
   |BUILD_LIST           |        0.2%  |     97.98%   |
   +---------------------+--------------+--------------+
   |YIELD_VALUE          |        0.2%  |     98.16%   |
   +---------------------+--------------+--------------+
   |JUMP_IF_FALSE_OR_POP |        0.2%  |     98.34%   |
   +---------------------+--------------+--------------+
   |BUILD_SLICE          |        0.1%  |     98.47%   |
   +---------------------+--------------+--------------+
   |BINARY_AND           |        0.1%  |     98.59%   |
   +---------------------+--------------+--------------+
   |CALL_FUNCTION_KW     |        0.1%  |     98.71%   |
   +---------------------+--------------+--------------+
   |INPLACE_ADD          |        0.1%  |     98.81%   |
   +---------------------+--------------+--------------+
   |LOAD_CLOSURE         |        0.1%  |     98.90%   |
   +---------------------+--------------+--------------+
   |ROT_TWO              |        0.1%  |     98.98%   |
   +---------------------+--------------+--------------+
   |BUILD_MAP            |        0.1%  |     99.06%   |
   +---------------------+--------------+--------------+
   |JUMP_IF_TRUE_OR_POP  |        0.1%  |     99.13%   |
   +---------------------+--------------+--------------+
   |JUMP_IF_NOT_EXC_MATCH|        0.1%  |     99.21%   |
   +---------------------+--------------+--------------+
   |SETUP_WITH           |        0.1%  |     99.27%   |
   +---------------------+--------------+--------------+
   |CALL_FUNCTION_EX     |        0.1%  |     99.34%   |
   +---------------------+--------------+--------------+
   |FORMAT_VALUE         |        0.1%  |     99.39%   |
   +---------------------+--------------+--------------+
   |POP_EXCEPT           |        0.0%  |     99.44%   |
   +---------------------+--------------+--------------+
   |STORE_DEREF          |        0.0%  |     99.49%   |
   +---------------------+--------------+--------------+
   |IMPORT_NAME          |        0.0%  |     99.53%   |
   +---------------------+--------------+--------------+
   |DELETE_SUBSCR        |        0.0%  |     99.56%   |
   +---------------------+--------------+--------------+
   |BUILD_STRING         |        0.0%  |     99.60%   |
   +---------------------+--------------+--------------+
   |DICT_MERGE           |        0.0%  |     99.63%   |
   +---------------------+--------------+--------------+
   |IMPORT_FROM          |        0.0%  |     99.67%   |
   +---------------------+--------------+--------------+
   |MAP_ADD              |        0.0%  |     99.70%   |
   +---------------------+--------------+--------------+
   |ROT_THREE            |        0.0%  |     99.73%   |
   +---------------------+--------------+--------------+
   |UNARY_NOT            |        0.0%  |     99.76%   |
   +---------------------+--------------+--------------+
   |RAISE_VARARGS        |        0.0%  |     99.78%   |
   +---------------------+--------------+--------------+
   |LIST_EXTEND          |        0.0%  |     99.81%   |
   +---------------------+--------------+--------------+
   |BUILD_CONST_KEY_MAP  |        0.0%  |     99.83%   |
   +---------------------+--------------+--------------+
   |LOAD_BUILD_CLASS     |        0.0%  |     99.85%   |
   +---------------------+--------------+--------------+
   |BINARY_OR            |        0.0%  |     99.87%   |
   +---------------------+--------------+--------------+
   |LIST_TO_TUPLE        |        0.0%  |     99.89%   |
   +---------------------+--------------+--------------+
   |INPLACE_SUBTRACT     |        0.0%  |     99.90%   |
   +---------------------+--------------+--------------+
   |BINARY_POWER         |        0.0%  |     99.92%   |
   +---------------------+--------------+--------------+
   |BINARY_FLOOR_DIVIDE  |        0.0%  |     99.93%   |
   +---------------------+--------------+--------------+
   |BUILD_SET            |        0.0%  |     99.94%   |
   +---------------------+--------------+--------------+
   |GET_YIELD_FROM_ITER  |        0.0%  |     99.95%   |
   +---------------------+--------------+--------------+
   |INPLACE_FLOOR_DIVIDE |        0.0%  |     99.96%   |
   +---------------------+--------------+--------------+
   |UNARY_INVERT         |        0.0%  |     99.97%   |
   +---------------------+--------------+--------------+
   |INPLACE_OR           |        0.0%  |     99.98%   |
   +---------------------+--------------+--------------+
   |DELETE_NAME          |        0.0%  |     99.98%   |
   +---------------------+--------------+--------------+
   |DELETE_ATTR          |        0.0%  |     99.98%   |
   +---------------------+--------------+--------------+
   |UNARY_NEGATIVE       |        0.0%  |     99.99%   |
   +---------------------+--------------+--------------+
   |STORE_GLOBAL         |        0.0%  |     99.99%   |
   +---------------------+--------------+--------------+
   |INPLACE_RSHIFT       |        0.0%  |     99.99%   |
   +---------------------+--------------+--------------+
   |SET_ADD              |        0.0%  |     99.99%   |
   +---------------------+--------------+--------------+
   |BINARY_XOR           |        0.0%  |     99.99%   |
   +---------------------+--------------+--------------+
   |ROT_FOUR             |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |IMPORT_STAR          |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |BINARY_LSHIFT        |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |RERAISE              |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |WITH_EXCEPT_START    |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |INPLACE_AND          |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |INPLACE_MODULO       |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |BINARY_RSHIFT        |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |INPLACE_MULTIPLY     |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |DELETE_FAST          |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |INPLACE_LSHIFT       |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |SET_UPDATE           |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |DUP_TOP_TWO          |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |LOAD_CLASSDEREF      |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+
   |DICT_UPDATE          |        0.0%  |    100.00%   |
   +---------------------+--------------+--------------+


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
